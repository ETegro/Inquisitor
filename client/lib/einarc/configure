#!/usr/bin/env ruby

require 'rbconfig'
RbConfig = Config unless defined?(RbConfig)

require 'optparse'
require 'src/raid/meta'

#===============================================================================
# Initialize options from environment and with detected defaults
#===============================================================================

options = {
	'DEST_DIR' => '',
	'BIN_DIR' => ENV['BIN_DIR'] || '/usr/local/bin',
	'RUBY_SHARE_DIR' => (ENV['RUBY_SHARE_DIR'] || RbConfig::CONFIG['sitelibdir']) + '/raid',
	'RUBY_LIB_DIR' => (ENV['RUBY_LIB_DIR'] || (RbConfig::CONFIG['vendorarchdir'] ? RbConfig::CONFIG['vendorarchdir'] : RbConfig::CONFIG['archdir'])) + '/raid',
	'TARGET' => ENV['TARGET'] || `uname -m`.chomp,
	'EINARC_VAR_DIR' => ENV['EINARC_VAR_DIR'] || '/var/lib/einarc',
	'modules' => [],
}

options['EINARC_LIB_DIR'] = ENV['EINARC_LIB_DIR'] || options['EINARC_VAR_DIR'] + '/tools'

#===============================================================================
# Parse command-line
#===============================================================================

begin
	OptionParser.new { |opts|
		opts.banner = 'Usage: ./configure [OPTION]...'

		padding = "\n" + opts.summary_indent + ' ' * (opts.summary_width + 3)
		module_help = padding + 'all - SPECIAL: build all available modules'
		RAID::MODULES.each_pair { |k, v| module_help += "#{padding}#{k} - #{v[:desc]}" }

		opts.on('--target=TARGET', "target to build for [#{options['TARGET']}]") { |t| options['TARGET'] = t }
		opts.on('--destdir=DIR', "destination root [#{options['DEST_DIR']}]") { |d| options['DEST_DIR'] = d }
		opts.on('--bindir=DIR', "user executables [#{options['BIN_DIR']}]") { |d| options['BIN_DIR'] = d }
		opts.on('--rubysharedir=DIR', "ruby share directory [#{options['RUBY_SHARE_DIR']}]") { |d| options['RUBY_SHARE_DIR'] = d }
		opts.on('--rubylibdir=DIR', "ruby binary extensions directory [#{options['RUBY_LIB_DIR']}]") { |d| options['RUBY_LIB_DIR'] = d }
		opts.on('--einarcvardir=DIR', "generic variable content directory [#{options['EINARC_VAR_DIR']}]") { |d| options['EINARC_VAR_DIR'] = d }
		opts.on('--einarclibdir=DIR', "proprietary extensions directory [#{options['EINARC_LIB_DIR']}]") { |d| options['EINARC_LIB_DIR'] = d }
		opts.on('--modules=LIST', "a comma-separated list of storage support modules to build [none]:#{module_help}") { |d|
			options['modules'] = case d
			when 'all' then RAID::MODULES.keys
			when 'none' then []
			else d.split(/, */)
			end
			options['modules'].each { |m| raise OptionParser::InvalidArgument unless RAID::MODULES[m] }
		}
		opts.on_tail('-h', '--help', 'Show this message') { puts opts; exit }
	}.parse!
	raise OptionParser::ParseError.new("Can't parse extra arguments in command line: #{ARGV.join(' ')}") unless ARGV.empty?
rescue OptionParser::ParseError => e
	$stderr.puts e.message
	exit 1
end

#===============================================================================
# Output results
#===============================================================================

File.open('config.Makefile', 'w') { |f|
	f.puts <<__EOF__
# DO NOT EDIT: IT'S A GENERATED FILE! USE ./configure to REGENERATE!

DESTDIR=#{options['DEST_DIR']}
BIN_DIR=#{options['BIN_DIR']}
RUBY_SHARE_DIR=#{options['RUBY_SHARE_DIR']}
RUBY_LIB_DIR=#{options['RUBY_LIB_DIR']}
EINARC_VAR_DIR=#{options['EINARC_VAR_DIR']}
EINARC_LIB_DIR=#{options['EINARC_LIB_DIR']}
TARGET=#{options['TARGET']}

# Modules to build: #{options['modules'].join(', ')}

tools: \\
#{options['modules'].collect { |m| "\ttools/#{m}/cli" if RAID::MODULES[m][:proprietary] }.compact.join(" \\\n")}
__EOF__
}

File.open('src/raid/build-config.rb', 'w') { |f|
	f.puts <<__EOF__
# DO NOT EDIT: IT'S A GENERATED FILE! USE ./configure to REGENERATE!

module RAID
	$EINARC_LIB = '#{options['EINARC_LIB_DIR']}'
	$EINARC_VAR = '#{options['EINARC_VAR_DIR']}'
	$TARGET = '#{options['TARGET']}'
	$RUBY_SHARE_DIR = '#{options['RUBY_SHARE_DIR']}'
end
__EOF__
}

RAID.generate_ruby_config(options['modules'], 'config.rb')

#===============================================================================
# Report success
#===============================================================================

puts <<__EOF__
Configure succeeded! 

Directories
-----------
User executables:       #{options['BIN_DIR']}
Ruby share:             #{options['RUBY_SHARE_DIR']}
Ruby libraries:         #{options['RUBY_LIB_DIR']}
Variable content:       #{options['EINARC_VAR_DIR']}
Proprietary extensions: #{options['EINARC_LIB_DIR']}

Modules
-------
#{options['modules'].join("\n")}

Now run 'make' to build Einarc and 'make install' to install it.
__EOF__
