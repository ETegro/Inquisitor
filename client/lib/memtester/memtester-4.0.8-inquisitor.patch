diff -urN memtester-4.0.8/CHANGELOG memtester-4.0.8-inq/CHANGELOG
--- memtester-4.0.8/CHANGELOG	Wed Nov 21 18:54:57 2007
+++ memtester-4.0.8-inq/CHANGELOG	Thu Mar 13 19:52:55 2008
@@ -1,3 +1,11 @@
+Version 4.0.8-inquisitor
+12 March 2008
+by stargrave@users.sourceforge.net
+
+  -added quiet mode, available through command line option (-q) to reduce
+  noisy output.
+  -added immediate exiting in case of error finding
+
 Version 4.0.8
 21 November 2007
 
diff -urN memtester-4.0.8/memtester.c memtester-4.0.8-inq/memtester.c
--- memtester-4.0.8/memtester.c	Wed Nov 21 18:54:57 2007
+++ memtester-4.0.8-inq/memtester.c	Thu Mar 13 19:49:02 2008
@@ -78,6 +78,8 @@
 }
 #endif
 
+unsigned short int quiet = 0;
+
 int main(int argc, char **argv) {
     ul loops, loop, i;
     size_t pagesize, wantmb, wantbytes, wantbytes_orig, bufsize, halflen, count;
@@ -98,11 +100,19 @@
     pagesizemask = (ptrdiff_t) ~(pagesize - 1);
     printf("pagesizemask is 0x%tx\n", pagesizemask);
 
-    if (argc < 2) {
+    if (!strcmp(argv[1],"-q")) {
+    	quiet=1;
+	printf("Quiet mode\n");
+    }
+    if (((argc < 2) && (quiet == 0)) || ((argc < 3) && (quiet == 1))) {
         fprintf(stderr, "need memory argument, in MB\n");
         exit(EXIT_FAIL_NONSTARTER);
     }
-    wantmb = (size_t) strtoul(argv[1], NULL, 0);
+    if(quiet){
+        wantmb = (size_t) strtoul(argv[2], NULL, 0);
+    } else {
+        wantmb = (size_t) strtoul(argv[1], NULL, 0);
+    }
     if (wantmb > maxmb) {
 	fprintf(stderr, "This system can only address %llu MB.\n", (ull) maxmb);
 	exit(EXIT_FAIL_NONSTARTER);
@@ -116,7 +126,11 @@
     if (argc < 3) {
         loops = 0;
     } else {
-        loops = strtoul(argv[2], NULL, 0);
+    	if(quiet){
+            loops = strtoul(argv[3], NULL, 0);
+        } else {
+            loops = strtoul(argv[2], NULL, 0);
+	}
     }
 
     printf("want %lluMB (%llu bytes)\n", (ull) wantmb, (ull) wantbytes);
diff -urN memtester-4.0.8/tests.c memtester-4.0.8-inq/tests.c
--- memtester-4.0.8/tests.c	Wed Nov 21 18:54:57 2007
+++ memtester-4.0.8-inq/tests.c	Thu Mar 13 19:50:41 2008
@@ -25,6 +25,8 @@
 #define PROGRESSLEN 4
 #define PROGRESSOFTEN 2500
 
+extern quiet;
+
 /* Function definitions. */
 
 int compare_regions(ulv *bufa, ulv *bufb, size_t count) {
@@ -35,9 +37,10 @@
 
     for (i = 0; i < count; i++, p1++, p2++) {
         if (*p1 != *p2) {
-            fprintf(stderr, "FAILURE: 0x%08lx != 0x%08lx at offset 0x%08lx.\n", 
+            fprintf(stderr, "\nFAILURE: 0x%08lx != 0x%08lx at offset 0x%08lx.\n", 
                 (ul) *p1, (ul) *p2, (ul) i);
             /* printf("Skipping to next test..."); */
+	    exit(1);
             r = -1;
         }
     }
@@ -49,33 +52,39 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+        printf("           ");
+        fflush(stdout);
+    }
     for (j = 0; j < 16; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
-        printf("setting %3u", j);
-        fflush(stdout);
+        if(!quiet){
+		printf("\b\b\b\b\b\b\b\b\b\b\b");
+		printf("setting %3u", j);
+		fflush(stdout);
+	}
         for (i = 0; i < count; i++) {
             *p1 = ((j + i) % 2) == 0 ? (ul) p1 : ~((ul) p1);
             *p1++;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+		printf("testing %3u", j);
+		fflush(stdout);
+	}
         p1 = (ulv *) bufa;
         for (i = 0; i < count; i++, p1++) {
             if (*p1 != (((j + i) % 2) == 0 ? (ul) p1 : ~((ul) p1))) {
                 fprintf(stderr, 
-                    "FAILURE: possible bad address line at offset 0x%08lx.\n", 
+                    "\nFAILURE: possible bad address line at offset 0x%08lx.\n", 
                     (ul) i);
-                printf("Skipping to next test...\n");
-                fflush(stdout);
-                return -1;
+		exit(1);
             }
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
@@ -86,17 +95,21 @@
     ul j = 0;
     size_t i;
 
-    putchar(' ');
-    fflush(stdout);
+    if(!quiet){
+	putchar(' ');
+	fflush(stdout);
+    }
     for (i = 0; i < count; i++) {
         *p1++ = *p2++ = rand_ul();
-        if (!(i % PROGRESSOFTEN)) {
-            putchar('\b');
-            putchar(progress[++j % PROGRESSLEN]);
-            fflush(stdout);
-        }
+	if(!quiet){
+	if (!(i % PROGRESSOFTEN)) {
+		putchar('\b');
+		putchar(progress[++j % PROGRESSLEN]);
+		fflush(stdout);
+	}
+	}
     }
-    printf("\b \b");
+    if(!quiet){printf("\b \b");}
     fflush(stdout);
     return compare_regions(bufa, bufb, count);
 }
@@ -201,26 +214,34 @@
     ul q;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+    	printf("           ");
+    	fflush(stdout);
+    }
     for (j = 0; j < 64; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
         q = (j % 2) == 0 ? UL_ONEBITS : 0;
-        printf("setting %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("setting %3u", j);
+        	fflush(stdout);
+	}
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("testing %3u", j);
+        	fflush(stdout);
+	}
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
@@ -232,26 +253,34 @@
     ul q;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+	printf("           ");
+	fflush(stdout);
+    }
     for (j = 0; j < 64; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
         q = (j % 2) == 0 ? CHECKERBOARD1 : CHECKERBOARD2;
-        printf("setting %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("setting %3u", j);
+        	fflush(stdout);
+	}
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("testing %3u", j);
+        	fflush(stdout);
+	}
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
@@ -262,25 +291,33 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+	printf("           ");
+	fflush(stdout);
+    }
     for (j = 0; j < 256; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("setting %3u", j);
+        	fflush(stdout);
+	}
         for (i = 0; i < count; i++) {
             *p1++ = *p2++ = (ul) UL_BYTE(j);
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("testing %3u", j);
+        	fflush(stdout);
+	}
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
@@ -291,14 +328,18 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+	printf("           ");
+	fflush(stdout);
+    }
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("setting %3u", j);
+        	fflush(stdout);
+	}
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
                 *p1++ = *p2++ = 0x00000001 << j;
@@ -306,14 +347,18 @@
                 *p1++ = *p2++ = 0x00000001 << (UL_LEN * 2 - j - 1);
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("testing %3u", j);
+        	fflush(stdout);
+	}
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
@@ -324,14 +369,18 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+	printf("           ");
+	fflush(stdout);
+    }
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("setting %3u", j);
+        	fflush(stdout);
+	}
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
                 *p1++ = *p2++ = UL_ONEBITS ^ (0x00000001 << j);
@@ -339,14 +388,18 @@
                 *p1++ = *p2++ = UL_ONEBITS ^ (0x00000001 << (UL_LEN * 2 - j - 1));
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("testing %3u", j);
+        	fflush(stdout);
+	}
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
@@ -357,14 +410,18 @@
     unsigned int j;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+	printf("           ");
+	fflush(stdout);
+    }
     for (j = 0; j < UL_LEN * 2; j++) {
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
         p1 = (ulv *) bufa;
         p2 = (ulv *) bufb;
-        printf("setting %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("setting %3u", j);
+        	fflush(stdout);
+	}
         for (i = 0; i < count; i++) {
             if (j < UL_LEN) { /* Walk it up. */
                 *p1++ = *p2++ = (i % 2 == 0)
@@ -378,14 +435,18 @@
                                     | (0x00000001 << (UL_LEN * 2 + 1 - j)));
             }
         }
-        printf("\b\b\b\b\b\b\b\b\b\b\b");
-        printf("testing %3u", j);
-        fflush(stdout);
+	if(!quiet){
+        	printf("\b\b\b\b\b\b\b\b\b\b\b");
+        	printf("testing %3u", j);
+        	fflush(stdout);
+	}
         if (compare_regions(bufa, bufb, count)) {
             return -1;
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
@@ -397,29 +458,37 @@
     ul q;
     size_t i;
 
-    printf("           ");
-    fflush(stdout);
+    if(!quiet){
+	printf("           ");
+	fflush(stdout);
+    }
     for (k = 0; k < UL_LEN; k++) {
         q = 0x00000001 << k;
         for (j = 0; j < 8; j++) {
-            printf("\b\b\b\b\b\b\b\b\b\b\b");
             q = ~q;
-            printf("setting %3u", k * 8 + j);
-            fflush(stdout);
+	    if(!quiet){
+            	printf("\b\b\b\b\b\b\b\b\b\b\b");
+            	printf("setting %3u", k * 8 + j);
+            	fflush(stdout);
+	    }
             p1 = (ulv *) bufa;
             p2 = (ulv *) bufb;
             for (i = 0; i < count; i++) {
                 *p1++ = *p2++ = (i % 2) == 0 ? q : ~q;
             }
-            printf("\b\b\b\b\b\b\b\b\b\b\b");
-            printf("testing %3u", k * 8 + j);
-            fflush(stdout);
+	    if(!quiet){
+            	printf("\b\b\b\b\b\b\b\b\b\b\b");
+            	printf("testing %3u", k * 8 + j);
+            	fflush(stdout);
+	    }
             if (compare_regions(bufa, bufb, count)) {
                 return -1;
             }
         }
     }
-    printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    if(!quiet){
+    	printf("\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b");
+    }
     fflush(stdout);
     return 0;
 }
