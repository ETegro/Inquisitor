#!/bin/sh -e
# NAME=Stressapptest
# DESCRIPTION=Stressful Application Test (or stressapptest) tries to maximize randomized traffic to memory from processor, with the intent of creating a realistic high load situation in order to test the existing hardware devices in a computer (See more information about benchmark itself at http://code.google.com/p/stressapptest/)
# DESTROYS_HDD=false
# IS_INTERACTIVE=false
# POWEROFF_DURING_TEST=false
# VERSION=0.1
# TAGS=
# DEPENDS=Memory,RAM,CPU
# VAR=TESTTIME:int:0:Total time of testing, sec
# VAR=MAX_ERRORS:int:0:Exit early after finding errors
# VAR=NUMA_LOCAL:bool:false:Choose memory regions associated with each CPU to be tested by that CPU
# VAR=NUMA_REMOTE:bool:false:Choose memory regions not associated with each CPU to be tested by that CPU
# VAR=MEMORY:int:0:Amount of memory to be tested, %. If zero is specified then automatically detect that value

. _inq-config-global; . $SHARE_DIR/functions-test

[ "$MAX_ERRORS" = 0 ] || MAX_ERRORS_OPTION="--max_errors ${MAX_ERRORS}"

[ "$NUMA_LOCAL" = "false" ] || NUMA_LOCAL_OPTION="--local_numa"
[ "$NUMA_REMOTE" = "false" ] || NUMA_REMOTE_OPTION="--remote_numa"

[ "$TESTTIME" -ne 0 ] || TESTTIME=$(( `cpu_quantity`*600 ))
[ "$MEMORY" -eq 0 ] && MEMORY_OPTION="" || MEMORY_OPTION="-M $(( $MEMORY * $( sed -n 's/^MemTotal: *\([0-9]*\).*$/\1/p' < /proc/meminfo ) / 102400 ))"

test_promise_time $TESTTIME

stressapptest -v 10 -A -s ${TESTTIME} \
	${MEMORY_OPTION} \
	${MAX_ERRORS_OPTION} \
	${NUMA_LOCAL_OPTION} \
	${NUMA_REMOTE_OPTION} || test_failed "Stressapptest failed"

test_succeeded
