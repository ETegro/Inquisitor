#!/bin/sh -ef
# NAME=HDD array stress
# DESCRIPTION=HDD array stress test
# DESTROYS_HDD=true
# IS_INTERACTIVE=false
# POWEROFF_DURING_TEST=false
# VERSION=0.1
# TAGS=hdd,stress
# VAR=TESTTIME:int:3600:Total time of HDD array testing, sec
# VAR=LOGTIME:int:120:Time between progress updates, sec
# VAR=JOBS:int:16:Number of parallely running jobs during compile
# VAR=STRESS_TREE:string:/usr/share/inquisitor/linux-2.6.22.5-31-stress.tar.gz:Tarball file containing stress test tree

. /usr/share/inquisitor/functions-test

MOUNTPOINT=`mktemp -d`

# Cleanup
exit_handler()
{
	local rc=$?
	trap - EXIT

	clear_testing_environment
	if [ -d "$MOUNTPOINT" ]; then
		rm -fr $MOUNTPOINT
	fi
	exit $rc
}
trap exit_handler HUP PIPE INT QUIT TERM EXIT

detect_hdd_quantity()
{
	sleep 5
	HDD_QUANTITY=`hal-find-by-property --key=storage.drive_type --string=disk | wc -l`
#	if [ "$HDD_QUANTITY" -gt 0 ]; then
		TIME_PER_ARRAY=$(( $TESTTIME / $HDD_QUANTITY ))
#	else
#		TIME_PER_ARRAY=$(( $TESTTIME / 2 ))
#	fi
}

clear_testing_environment()
{
	cd /
	umount -f $MOUNTPOINT || true
}

array_stress_check()
{
	local array=$1

	echo -n "Preparing array $array..."
	prepare_array_for_test $array
	echo_success

	echo "Testing $array..."
	START=`date "+%s"`
	LAST_LOG_TIME=$TOTAL_START

	while true; do
		TIME=`date "+%s"`
		if [ $(($TIME - $START)) -gt $TIME_PER_ARRAY ]; then
			clear_testing_environment
			break
		else
			make clean >/dev/null 2>&1 && \
			make -j $JOBS fs >/dev/null 2>&1 || test_failed "Make error"
		fi

		if [ $(($TIME - $LAST_LOG_TIME)) -gt $LOGTIME ]; then
			test_progress $(( $TIME - $START )) $TESTTIME
			LAST_LOG_TIME=$TIME
		fi
	done
}

prepare_array_for_test()
{
	local array=$1

	mke2fs -m0 -F $array >/dev/null 2>&1 || test_failed "Disk write error"
	mount -t ext2 $array $MOUNTPOINT

	cd $MOUNTPOINT
	tar xzf "$STRESS_TREE" >/dev/null 2>&1 || test_failed "Untaring error"

	tree_name=`basename "$STRESS_TREE" .tar.gz`
	cd $tree_name

	#is it linux source?
	if echo "$tree_name" | grep '^linux' ; then
		find . -print | xargs touch >/dev/null 2>&1 || true
		touch .config include/linux/autoconf.h >/dev/null 2>&1 || true
	fi
}

#Making arrays
if raid-wizard-optimal; then
	detect_hdd_quantity
	true
else
	test_failed "No HDDs"
	return
fi

#TEMPORARY checking for correct number of JOBS
TOTAL_MEMORY=$(( `grep MemTotal /proc/meminfo | awk '{print $2}'` / 1024 ))
[ "$TOTAL_MEMORY" -lt 512 ] && JOBS=4 || true

TOTAL_START=`date "+%s"`
test_promise_time $TESTTIME

for i in `get_harddrives_list`; do
	array_stress_check $i
done
