#!/bin/sh -ef
# NAME=odd_write
# DESCRIPTION=Optical Disc Drive write test
# DESTROYS_HDD=false
# IS_INTERACTIVE=true
# POWEROFF_DURING_TEST=false
# VERSION=0.1
# VAR=TEST_IMAGE:string:/usr/share/inquisitor/testimage.iso:Default image for comparison
# VAR=TEST_IMAGE_BLOCKS:int:332800:This images size in blocks (2048 bytes each)
# VAR=TEST_IMAGE_MD5:string:ffffffffffffffffffffffffffffffff:Test image MD5 hash
# VAR=WRITE_SPEED:int:10:Default write speed if it won't detect
# VAR=WRITE_SPEED_FORCE:boolean:true:Force write speed using
# VAR=WRITE_MESSAGE:string:Writing test disc:Message to print when test will start

. /usr/share/inquisitor/functions-test

load_kernel_modules()
{
	modprobe ide-cd || true
	sleep 5
}

test_read()
{
	local odd=$1
	local hash

	hash=`readcd -v dev=$odd f=- sectors=0-$TEST_IMAGE_BLOCKS retries=8 | md5sum -b | awk '{print $1}'`
	[ -z "$hash" ] && {hash=`dd if=$odd bs=2048 count=$TEST_IMAGE_BLOCKS | md5sum -b | awk '{print $1}'`}

	[ $hash = $TEST_IMAGE_MD5 ] && FLAG=1 || FLAG=0
}

test_write()
{
	local odd=$1

	check_media_existence $odd
	detect_maxspeed $odd
	blank_if_needed $odd $SPEED

	print_green_message "Writing..."
	cdrecord dev=$odd driveropts=burnfree speed=$SPEED -delay 2 -\
		-data $TEST_IMAGE && FLAG=1 || FLAG=0
	print_green_message "Writing done"
}

check_media_existence()
{
	local odd=$1

	if cdrecord dev=$odd -atip | grep -q 'Is erasable'; then
		print_green_message "Rewritable media already inserted, not ejecting"
	else
		print_green_message "Insert writable media..."
		eject $odd || true
	fi
}

detect_maxspeed()
{
	local odd=$1

	if [ "$WRITE_SPEED_FORCE" = "true" ]; then
		SPEED=$WRITE_SPEED
	else
		SPEED=`cdrecord dev=$odd -atip | \
			sed -ne '/speed high/ s/^.*speed high: \(.*\)$/\1/ p' | head -n 1`
		[ -z "$SPEED" ] && SPEED=$WRITE_SPEED || true
	fi

}

blank_if_needed()
{
	local odd=$1
	local speed=$2

	if cdrecord dev=$odd -atip | grep -q 'Is erasable'; then
		print_green_message "Blanking..."
		cdrecord dev=$odd speed=$speed blank=fast >/dev/null 2>&1
		print_green_message "Blanking done"
	else
		print_green_message "Non rewritable media. Skipping blanking..."
	fi
}

interactive()
{
	local odd=$1
	local non_passed=1

	while ( [ "$non_passed" -eq 1 ] ); do
		eject $odd || true
		print_green_message "Drive $(( $TESTED_QUANTITY + 1)):"
		print_green_message "Either press y and insert media for testing, or n if you want to finish test: "
		read choice

		if [ "$choice" = "n" ]; then
			test_failed "User cancelled test for $odd"
			break
		fi

		FLAG=0
		test_write $odd

		if [ "$FLAG" -eq 1 ]; then
			print_green_message "Write stage passed, performing read test..."

			FLAG=0
			test_read $odd

			if [ "$FLAG" -eq 1 ]; then
				print_green_message "Drive test passed"
				TESTED_QUANTITY=$(( $TESTED_QUANTITY + 1 ))
				test_progress $TESTED_QUANTITY $ODD_QUANTITY
				non_passed=0
				eject $odd || true
			else
				print_red_message "Drive test failed"
			fi
		else
			print_red_message "Write stage failed"
		fi
	done
}

load_kernel_modules

ODD_QUANTITY=`hal-find-by-capability --capability storage.cdrom | wc -l`
[ "$ODD_QUANTITY" -eq 0 ] && return

TESTED_QUANTITY=0
print_green_message "$WRITE_MESSAGE"

for i in `get_odds_list`; do
	interactive $i
done

test_succeeded
