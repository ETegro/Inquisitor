#!/bin/sh

REST_SERVER=http://$SERVER:3000

get_id_by_macs()
{
	MACS=$1
	if Z=`curl -sf "$REST_SERVER/computers/identify?macs=$MACS"`; then
		echo "$Z" | grep '<id' | sed 's/^.*id [^>]*>\s*\([0-9]\+\)\s*<\/\s*id.*$/\1/' 
	fi
}

plan_test_script()
{
	if ! curl -sf "$REST_SERVER/computers/plan/$COMPUTER_ID" >$HOME/test_script; then
		echo 'Unable to get testing plan'
		return 1
	fi
}

test_stage_advance()
{
	local stage=$1
	local event=$2
	local comment=`echo -n "$3" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`

	curl -sf "$REST_SERVER/computers/advance/$COMPUTER_ID.xml?stage=$stage&event=$event&comment=$comment" >/dev/null
}

test_stage_progress()
{
	local complete=$1
	local total=$2

	curl -sf "$REST_SERVER/computers/progress/$COMPUTER_ID.xml?complete=$complete&total=$total" >/dev/null
}

test_promise_time()
{
	curl -sf "$REST_SERVER/computers/test_promise_time/$COMPUTER_ID.xml?sec=$1"
}

submit_components()
{
	FILENAME=$1
	curl -f --data list=\""`cat $FILENAME `"\" -X POST "$REST_SERVER/computers/submit_components/$COMPUTER_ID.xml"
}

submit_additional_components()
{
	FILENAME=$1
	curl -f --data list=\""`cat $FILENAME `"\" -X POST "$REST_SERVER/computers/submit_additional_components/$COMPUTER_ID.xml"
}

# Mark current testing as finished
testing_finished()
{
	curl -sf "$REST_SERVER/computers/testing_finished/$COMPUTER_ID"
}

set_ip()
{
	curl -sf "$REST_SERVER/computers/set_ip/$COMPUTER_ID?ip=$1"
}

watchdog()
{
	while true; do
		curl -sf "$REST_SERVER/computers/watchdog/$COMPUTER_ID" || echo 'Watchdog ping failed!'
		sleep $[45 + $RANDOM % 15]
	done
}

publish_my_ip()
{
	set_ip `subnet_for_dev eth0`
}

benchmark_submit_float()
{
	local key=`echo -n "$1" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`
	local value=$2

	if ! curl -sf "$REST_SERVER/computers/benchmark_submit_float/$COMPUTER_ID?key=$key&value=$value"; then
		echo 'benchmark_submit_float: failed to submit'
		return 1
	fi
}

benchmark_submit_string()
{
	local key=`echo -n "$1" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`
	local value=`echo -n "$2" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`

	if ! curl -sf "$REST_SERVER/computers/benchmark_submit_string/$COMPUTER_ID?key=$key&value=$value"; then
		echo 'benchmark_submit_string: failed to submit'
		return 1
	fi
}
