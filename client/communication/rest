#!/bin/sh

REST_SERVER=http://$SERVER:3000

get_id_by_macs()
{
	MACS=$1
	if Z=`curl -sf "$REST_SERVER/computers/identify?macs=$MACS"`; then
		echo "$Z" | grep '<id' | sed 's/^.*id [^>]*>\s*\([0-9]\+\)\s*<\/\s*id.*$/\1/' 
	fi
}

plan_test_script()
{
	if ! curl -sf "$REST_SERVER/computers/plan/$COMPUTER_ID" >$HOME/test_script; then
		echo 'Unable to get testing plan'
		return 1
	fi
}

test_stage_advance()
{
	local stage=$1
	local type=$2
	local version=$3
	local event=$4
	local comment=`echo -n "$5" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`

	curl -sf "$REST_SERVER/computers/advance/$COMPUTER_ID.xml?stage=$stage&type=$type&version=$version&event=$event&comment=$comment" >/dev/null
}

test_stage_progress()
{
	local complete=$1
	local total=$2

	curl -sf "$REST_SERVER/computers/progress/$COMPUTER_ID.xml?complete=$complete&total=$total" >/dev/null
}

test_promise_time()
{
	curl -sf "$REST_SERVER/computers/test_promise_time/$COMPUTER_ID.xml?sec=$1"
}

submit_components()
{
	curl -f --data list=\""`cat $1 `"\" -X POST "$REST_SERVER/computers/submit_components/$COMPUTER_ID.xml"
}

submit_additional_components()
{
	[ -r "$1" ] && curl -f --data list=\""`cat $1 `"\" -X POST "$REST_SERVER/computers/submit_additional_components/$COMPUTER_ID.xml"
}

# Mark current testing as finished
testing_finished()
{
	curl -sf "$REST_SERVER/computers/testing_finished/$COMPUTER_ID"
}

set_ip()
{
	curl -sf "$REST_SERVER/computers/set_ip/$COMPUTER_ID?ip=$1"
}

check_audit()
{
	curl -sf "$REST_SERVER/computers/check_audit/$COMPUTER_ID.xml"
}

watchdog()
{
	while true; do
		curl -sf "$REST_SERVER/computers/watchdog/$COMPUTER_ID" || echo 'Watchdog ping failed!'
		sleep $[45 + $RANDOM % 15]
	done
}

publish_my_ip()
{
	local dev=`dev_for_route_to_server`
	set_ip `subnet_for_dev $dev`
}

benchmark_submit_float()
{
	local key=`echo -n "$1" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`
	local value=$2
	local units=$3

	if ! curl -sf "$REST_SERVER/computers/benchmark_submit_float/$COMPUTER_ID?key=$key&value=$value&units=$units"; then
		echo 'benchmark_submit_float: failed to submit'
		return 1
	fi
}

benchmark_submit_string()
{
	local key=`echo -n "$1" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`
	local value=`echo -n "$2" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`

	if ! curl -sf "$REST_SERVER/computers/benchmark_submit_string/$COMPUTER_ID?key=$key&value=$value"; then
		echo 'benchmark_submit_string: failed to submit'
		return 1
	fi
}

set_profile()
{
	if ! curl -sf "$REST_SERVER/computers/set_profile/$COMPUTER_ID?profile=$1"; then
		echo 'set_profile: failed to set'
		return 1
	fi
}

monitoring_submit()
{
	local key=$1
	local value=$2

	if ! curl -sf "$REST_SERVER/computers/monitoring_submit/$COMPUTER_ID?monitoring_id=$MONITORING_ID&key=$key&value=$value"; then
		echo "monitoring_submit: failed to submit ${MONITORING_NAME}"
		return 1
	fi
}

monitoring_submit_multiple()
{
	local data=$1

	if ! curl -sf -F monitoring_data=@$data "$REST_SERVER/computers/monitoring_submit_multiple/$COMPUTER_ID?monitoring_id=$MONITORING_ID"; then
		echo "monitoring_submit_multiple: failed to submit ${MONITORING_NAME}"
		return 1
	fi
}

require_attention()
{
	if ! curl -sf "$REST_SERVER/computers/advance/$COMPUTER_ID?event=require_attention&stage=$TEST_NAME"; then
		echo 'require_attention: failed to change state'
		return 1
	fi
}

dismiss_attention()
{
	if ! curl -sf "$REST_SERVER/computers/advance/$COMPUTER_ID?event=dismiss_attention&stage=$TEST_NAME"; then
		echo 'dismiss_attention: failed to change state'
		return 1
	fi
}

get_needed_firmwares_list()
{
	if ! curl -sf "$REST_SERVER/computers/get_needed_firmwares_list/$COMPUTER_ID"; then
		echo "get_needed_firmwares_list: failed to get list"
		return 1
	fi
}

boot_from_image()
{
	local image=`echo -n "$1" | ruby -e 'require "cgi"; print CGI::escape($stdin.read)'`

	if ! curl -sf "$REST_SERVER/computers/boot_from_image/$COMPUTER_ID?image=$image"; then
		echo "boot_from_image: request failed"
		return 1
	fi
}

compare_fast()
{
	curl -sf "$REST_SERVER/computers/compare_fast/$COMPUTER_ID.xml?files=$FILENAMES&excluded=$EXCLUDED"
}
