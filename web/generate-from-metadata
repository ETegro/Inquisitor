#!/usr/bin/env ruby

require '../trunk/server/web/lib/planner/meta'

# ========================
# Generate pages for tests
# ========================

File.open('src/doc/tests/index.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Test directory
inMenu: true
orderInfo: 30
---
h2. Tests

Tests are modules of Inquisitor that do the real work. They usually do
one specific action and can return binary result: passed or failed.
Tests are usually ran automatically by
<a href="{relocatable:/doc/scheduler.page}">scheduler</a>, but can be
<a href="{relocatable:/doc/manual-invocation.page}">invoked manually</a>,
as a regular executable with parameters. All tests follow the
same format (which is described in
<a href="{relocatable:/doc/test-format.page}">test format</a> section).

Current version of Inquisitor includes the following tests:

<table class="toc">
<tr><th>#</th><th>Script</th><th>Title</th><th>Components tested</th></tr>
__EOF__

	n = 0
	$TESTS.keys.sort.each { |k|
		v = $TESTS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		<td>#{v[:depends].join(', ') if v[:depends]}</td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

File.open('src/doc/tests/index.ru.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Каталог тестов
directoryName: Тесты
inMenu: true
orderInfo: 30
---
h2. Тесты

Тесты - модули Inquisitor, которые занимаются непосредственно
тестированием. Обычно они делают какую-то одну простую проверку и
возвращают результат: тест пройден или нет. Тесты обычно запускаются
автоматически с помощью <a href="{relocatable:/doc/scheduler.page}">планировщика</a>, но, кроме
того, их можно <a href="{relocatable:/doc/manual-invocation.page}">запускать вручную</a>,
как обычный исполнямый файл. Все тесты написаны в одном и том же формате
(который описывается в секции <a href="{relocatable:/doc/test-format.page}">формат тестов</a>).

Текущая версия Inquisitor включает в себя следующие тесты:

<table class="toc">
<tr><th>#</th><th>Скрипт</th><th>Название</th><th>Тестируемые компоненты</th></tr>
__EOF__

	n = 0
	$TESTS.keys.sort.each { |k|
		v = $TESTS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		<td>#{v[:depends].join(', ') if v[:depends]}</td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

$TESTS.keys.sort.each { |k|
	v = $TESTS[k]
	File.open("src/doc/tests/#{k}.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "<div class=\"infobox\"><img src=\"{relocatable:/images/hdd-destructive.png}\" width=\"64\" height=\"64\" title=\"Test destroys contents of HDD\" alt=\"Test destroys contents of HDD\" /></div>" if v[:destroys_hdd]
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
		if v[:depends] and not v[:depends].empty? then
			ft.puts "* *Components tested:* #{v[:depends].join(', ')}"
		end
		if v[:var] and not v[:var].empty? then
			ft.puts "* *Variables:*"
			v[:var].keys.sort.each { |name|
				var = v[:var][name]
				ft.print "** *#{name}* (#{var[:type]}, default: "
				ft.print var[:default].empty? ? '_empty_' : "@#{var[:default]}@"
				ft.puts ") &mdash; #{var[:comment]}"
			}
		end
	}
	File.open("src/doc/tests/#{k}.ru.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "<div class=\"infobox\"><img src=\"{relocatable:/images/hdd-destructive.png}\" width=\"64\" height=\"64\" title=\"Тест уничтожает содержимое жесткого диска\" alt=\"Тест уничтожает содержимое жесткого диска\" /></div>" if v[:destroys_hdd]
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
		if v[:depends] and not v[:depends].empty? then
			ft.puts "* *Тестируемые компоненты:* #{v[:depends].join(', ')}"
		end
		if v[:var] and not v[:var].empty? then
			ft.puts "* *Переменные:*"
			v[:var].keys.sort.each { |name|
				var = v[:var][name]
				ft.print "** *#{name}* (#{var[:type]}, по умолчанию: "
				ft.print var[:default].empty? ? '_empty_' : "@#{var[:default]}@"
				ft.puts ") &mdash; #{var[:comment]}"
			}
		end
	}
}

# ==========================
# Generate pages for detects
# ==========================

File.open('src/doc/detects/index.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Detects directory
inMenu: true
orderInfo: 30
---
h2. Detects

Detects are modules of Inquisitor that scan hardware of computer under
test and try to identify each hardware vendor name, model name
and serial number. Maybe it is less useful on LiveCD and standalone
version of Inquisitor, but it critical for enterprise version.

Current version of Inquisitor includes the following detects:

<table class="toc">
<tr><th>#</th><th>Script</th><th>Title</th><th>Components detected</th></tr>
__EOF__

	n = 0
	$DETECTS.keys.sort.each { |k|
		v = $DETECTS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		<td>#{v[:depends].join(', ') if v[:depends]}</td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

File.open('src/doc/detects/index.ru.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Каталог детектов
directoryName: Детекты
inMenu: true
orderInfo: 30
---
h2. Детекты

Детекты - модули Inquisitor, которые проверяют все аппаратное обеспечение
компьютера, стоящего на тестировании, и пытаются определить имя производителя, 
название модели и серийный номер компонента. Возможно детекты не так важны в 
standalone и LiveCD версии Inquisitor, но они критично важны в его enterprise 
версии.

Текущая версия Inquisitor включает в себя следующие детекты:

<table class="toc">
<tr><th>#</th><th>Скрипт</th><th>Название</th><th>Определяемые компоненты</th></tr>
__EOF__

	n = 0
	$DETECTS.keys.sort.each { |k|
		v = $DETECTS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		<td>#{v[:depends].join(', ') if v[:depends]}</td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

$DETECTS.keys.sort.each { |k|
	v = $DETECTS[k]
	File.open("src/doc/detects/#{k}.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
		if v[:depends] and not v[:depends].empty? then
			ft.puts "* *Components detected:* #{v[:depends].join(', ')}"
		end
	}
	File.open("src/doc/detects/#{k}.ru.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
		if v[:depends] and not v[:depends].empty? then
			ft.puts "* *Детектируемые компоненты:* #{v[:depends].join(', ')}"
		end
	}
}

# ===================================
# Generate pages for software detects
# ===================================

File.open('src/doc/software-detects/index.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Software detects directory
inMenu: true
orderInfo: 30
---
h2. Software detects

Software detects are modules of Inquisitor that scan software of
computer under test. Programs that can affect testing of benchmarking
results are identified. They are inherent part as hardware detects.

Current version of Inquisitor includes the following software detects:

<table class="toc">
<tr><th>#</th><th>Script</th><th>Title</th></tr>
__EOF__

	n = 0
	$SOFTWARE_DETECTS.keys.sort.each { |k|
		v = $SOFTWARE_DETECTS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

File.open('src/doc/software-detects/index.ru.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Каталог программных детектов
directoryName: Программные детекты
inMenu: true
orderInfo: 30
---
h2. Программные детекты

Программные детекты - модули Inquisitor, которые проверяют программное
обеспечение компьютера, стоящего на тестировании. Определяется только
те программы, которые могут влиять на результаты тестирования
или бенчмаркинга. Они так же неотъемлемы как и детекты аппаратного
обеспечения.

Текущая версия Inquisitor включает в себя следующие программные детекты:

<table class="toc">
<tr><th>#</th><th>Скрипт</th><th>Название</th></tr>
__EOF__

	n = 0
	$SOFTWARE_DETECTS.keys.sort.each { |k|
		v = $SOFTWARE_DETECTS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

$SOFTWARE_DETECTS.keys.sort.each { |k|
	v = $SOFTWARE_DETECTS[k]
	File.open("src/doc/software-detects/#{k}.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
	}
	File.open("src/doc/software-detects/#{k}.ru.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
	}
}


# ==============================
# Generate pages for monitorings
# ==============================

File.open('src/doc/monitorings/index.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Monitorings directory
inMenu: true
orderInfo: 30
---
h2. Monitorings

Monitorings are modules of Inquisitor that are intended to run in
background full time when computer is under testing. They act like
daemons that from time to time get neecessary measurements and save
them. The main measurement is temperature of most
components. We can start CPU intensive using test and watch how
processor's temperature will greatly increase. After that we can make
decisions about component's appropriateness for using.

Current version of Inquisitor includes the following monitorings:

<table class="toc">
<tr><th>#</th><th>Script</th><th>Title</th><th>Measurement</th></tr>
__EOF__

	n = 0
	$MONITORINGS.keys.sort.each { |k|
		v = $MONITORINGS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		<td>#{v[:measurement]}</td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

File.open('src/doc/monitorings/index.ru.page', 'w') { |f|
	f.puts <<__EOF__
---
title: Каталог мониторингов
directoryName: Мониторинги
inMenu: true
orderInfo: 30
---
h2. Мониторинги

Мониторинги - модули Inquisitor, которые предназначены для запуска в
фоновом режиме на протяжении всего времени тестирования компьютера.
Они работают подобно "демонам" которые время от времени делают
требуемые измерения и сохраняют их. Наиболее важное измерение для
большинства компонентов это температура. Мы можем запустить тест,
интенсивно использующий CPU, и следить за тем, как сильно повысится
его температура. После этого мы может сделать выводы о пригодности
использования данного аппаратного компонента.

Текущая версия Inquisitor включает в себя следующие мониторинги:

<table class="toc">
<tr><th>#</th><th>Скрипт</th><th>Название</th><th>Измерение</th></tr>
__EOF__

	n = 0
	$MONITORINGS.keys.sort.each { |k|
		v = $MONITORINGS[k]
		n += 1
		f.puts "<tr>
		<td style=\"text-align: right\">#{n}</td>
		<td>#{k}</td>
		<td><a href=\"{relocatable:#{k}.page}\">#{v[:name]}</a></td>
		<td>#{v[:measurement]}</td>
		</tr>"
	}
	f.puts "</table>\n\n"
}

$MONITORINGS.keys.sort.each { |k|
	v = $MONITORINGS[k]
	File.open("src/doc/monitorings/#{k}.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
		ft.puts "* *Monitoring ID:* #{v[:id]}"
		ft.puts "* *Measurement:* #{v[:measurement]}"
	}
	File.open("src/doc/monitorings/#{k}.ru.page", 'w') { |ft|
		ft.puts <<__EOF__
---
title: "#{v[:name]}"
inMenu: true
---
__EOF__
		ft.puts "h2. #{v[:name]} (#{k})"
		ft.puts
		ft.puts "#{v[:description]}"
		ft.puts
		ft.puts "* *ID мониторинга:* #{v[:id]}"
		ft.puts "* *Измерение:* #{v[:measurement]}"
	}
}
