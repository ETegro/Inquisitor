---
title: Tests
inMenu: true
orderInfo: 30
---
h2. Tests

Tests are modules of Inquisitor that do the real work. They usually do
one specific action and can return binary result: passed or failed.
Tests are usually ran automatically by
<a href="{relocatable: scheduler.page}">scheduler</a>, but can be
<a href="{relocatable: manual-invokation.page}">invoked manually</a>,
as a regular executable with parameters. All tests follow the
same format (which is described in
<a href="{relocatable: test-format.page}">test format</a> section).

Current version of Inquisitor includes the following tests:

<table class="toc">
<tr><th>#</th><th>Script</th><th>Title</th><th>Components tested</th></tr>
<tr><td style="text-align: right">1</td><td>bonnie</td><td><a href="#bonnie">Bonnie</a></td><td>HDD</td></tr>
<tr><td style="text-align: right">2</td><td>bytemark</td><td><a href="#bytemark">BYTEmark</a></td><td>CPU, Memory, Mainboard</td></tr>
<tr><td style="text-align: right">3</td><td>cpu</td><td><a href="#cpu">CPU burning</a></td><td>CPU</td></tr>
<tr><td style="text-align: right">4</td><td>db_comparison</td><td><a href="#db_comparison">DB to Detects comparison</a></td><td>BMC, CPU, Chassis, Disk Controller, Floppy, HDD, Mainboard, Memory, NIC, OSD, Platform, USB, Video</td></tr>
<tr><td style="text-align: right">5</td><td>dhrystone</td><td><a href="#dhrystone">Dhrystone</a></td><td>CPU</td></tr>
<tr><td style="text-align: right">6</td><td>fdd</td><td><a href="#fdd">FDD read/write</a></td><td>Floppy</td></tr>
<tr><td style="text-align: right">7</td><td>firmware</td><td><a href="#firmware">Firmware reflashing</a></td><td>Mainboard, Disk Controller</td></tr>
<tr><td style="text-align: right">8</td><td>flash</td><td><a href="#flash">Flash disk</a></td><td></td></tr>
<tr><td style="text-align: right">9</td><td>gprs-modem</td><td><a href="#gprs-modem">USB GPRS modem</a></td><td></td></tr>
<tr><td style="text-align: right">10</td><td>gprs-modem-dialup</td><td><a href="#gprs-modem-dialup">USB GPRS Modem Dialup</a></td><td></td></tr>
<tr><td style="text-align: right">11</td><td>gprs-modem-level</td><td><a href="#gprs-modem-level">USB GPRS modem signal level</a></td><td></td></tr>
<tr><td style="text-align: right">12</td><td>hdd-array</td><td><a href="#hdd-array">HDD array stress</a></td><td>CPU, HDD, Memory, Mainboard, Disk Controller</td></tr>
<tr><td style="text-align: right">13</td><td>hdd-passthrough</td><td><a href="#hdd-passthrough">HDD passthrough</a></td><td>CPU, HDD, Memory, Mainboard, Disk Controller</td></tr>
<tr><td style="text-align: right">14</td><td>hdd-smart</td><td><a href="#hdd-smart">HDD SMART</a></td><td>HDD, Disk Controller</td></tr>
<tr><td style="text-align: right">15</td><td>hdparm</td><td><a href="#hdparm">HDD speed benchmark: hdparm</a></td><td>Disk Controller, HDD</td></tr>
<tr><td style="text-align: right">16</td><td>memory</td><td><a href="#memory">Memory test: memtester</a></td><td>Memory</td></tr>
<tr><td style="text-align: right">17</td><td>mencoder</td><td><a href="#mencoder">Mencoder</a></td><td>CPU, Memory, Mainboard</td></tr>
<tr><td style="text-align: right">18</td><td>net</td><td><a href="#net">Network interface</a></td><td>NIC</td></tr>
<tr><td style="text-align: right">19</td><td>odd_read</td><td><a href="#odd_read">ODD read</a></td><td>OSD</td></tr>
<tr><td style="text-align: right">20</td><td>odd_write</td><td><a href="#odd_write">odd_write</a></td><td>ODD</td></tr>
<tr><td style="text-align: right">21</td><td>stream</td><td><a href="#stream">Stream</a></td><td>Memory</td></tr>
<tr><td style="text-align: right">22</td><td>unixbench</td><td><a href="#unixbench">Unixbench</a></td><td>CPU, Memory, Mainboard</td></tr>
<tr><td style="text-align: right">23</td><td>usb-device</td><td><a href="#usb-device">USB presence</a></td><td>USB</td></tr>
<tr><td style="text-align: right">24</td><td>usb-flash-drive</td><td><a href="#usb-flash-drive">USB Flash Drive</a></td><td>USB</td></tr>
<tr><td style="text-align: right">25</td><td>whetstone</td><td><a href="#whetstone">Whetstone</a></td><td>CPU</td></tr>
</table>

h3. <a name="bonnie"></a>Bonnie (bonnie)

<div class="infobox"><img src="{relocatable:/images/hdd-destructive.png}" width="64" height="64" title="Test destroys contents of HDD" alt="Test destroys contents of HDD" /></div>

Bonnie HDD performance benchmark

* *Components tested:* HDD

h3. <a name="bytemark"></a>BYTEmark (bytemark)


BYTEmark native mode benchmark

* *Components tested:* CPU, Memory, Mainboard

h3. <a name="cpu"></a>CPU burning (cpu)


CPU burn-in testing

* *Components tested:* CPU
* *Variables:*
** *TESTTIME* (int, default: @1800@) &mdash; Total time of CPU testing, sec

h3. <a name="db_comparison"></a>DB to Detects comparison (db_comparison)


Pauses testing until comparison has been completed on application server

* *Components tested:* BMC, CPU, Chassis, Disk Controller, Floppy, HDD, Mainboard, Memory, NIC, OSD, Platform, USB, Video

h3. <a name="dhrystone"></a>Dhrystone (dhrystone)


Dhrystone integer calculations benchmark

* *Components tested:* CPU
* *Variables:*
** *DURATION* (int, default: @30@) &mdash; Benchmark duration (sec)

h3. <a name="fdd"></a>FDD read/write (fdd)


Floppy drive read/write test

* *Components tested:* Floppy
* *Variables:*
** *FLOPPY_SIZE* (int, default: @1440@) &mdash; Size of testing floppy, KiB

h3. <a name="firmware"></a>Firmware reflashing (firmware)


Firmware reflashing

* *Components tested:* Mainboard, Disk Controller

h3. <a name="flash"></a>Flash disk (flash)

<div class="infobox"><img src="{relocatable:/images/hdd-destructive.png}" width="64" height="64" title="Test destroys contents of HDD" alt="Test destroys contents of HDD" /></div>

Flash disk badblocks test

* *Variables:*
** *SIZE_LIMIT* (int, default: @2048@) &mdash; That is less than this amount is an IDE flash, MiB

h3. <a name="gprs-modem"></a>USB GPRS modem (gprs-modem)


Test GPRS modem, connected using USB

* *Variables:*
** *ANSWER_ATI* (string, default: @OK@) &mdash; String to get after ATI
** *CHAT_TIMEOUT* (int, default: @5@) &mdash; Timeout for waiting for answer
** *DEV* (string, default: @/dev/ttyUSB0@) &mdash; Name of device to test

h3. <a name="gprs-modem-dialup"></a>USB GPRS Modem Dialup (gprs-modem-dialup)


Test GPRS modem, connected using USB

* *Variables:*
** *APN* (string, default: @internet.mts.ru@) &mdash; Cell service provider's Internet APN
** *DEV* (string, default: @/dev/ttyUSB0@) &mdash; Name of device to test
** *DOWNLOAD_MAX_TIME* (int, default: @60@) &mdash; Timeout for the whole download, sec
** *DOWNLOAD_TRIES* (int, default: @3@) &mdash; Number of tries to download the file
** *MD5* (string, default: @ca530886183b06d0047e0655537327aa@) &mdash; MD5 of downloaded file
** *PPPD_TRIES* (int, default: @4@) &mdash; Number of tries to bring pppd up
** *PPPD_USERNAME* (string, default: @mts@) &mdash; Cell service provider's pppd username
** *SPEED* (int, default: @115200@) &mdash; Line speed
** *UPLOAD_FILE* (string, default: @/etc/ld.so.cache@) &mdash; File to upload
** *UPLOAD_MAX_TIME* (int, default: @120@) &mdash; Timeout for file upload, sec
** *UPLOAD_TRIES* (int, default: @3@) &mdash; Number of tries to upload the file
** *UPLOAD_URL* (string, default: _empty_) &mdash; URL to upload (without http)
** *URL* (string, default: @img-fotki.yandex.ru/getx/10/photoface.359/sevastopol-foto_34661_L@) &mdash; URL to download (without http)

h3. <a name="gprs-modem-level"></a>USB GPRS modem signal level (gprs-modem-level)


Measure signal level, received by GPRS modem, connected via USB

* *Variables:*
** *CHAT_TIMEOUT* (int, default: @5@) &mdash; Timeout for waiting for answer
** *DEV* (string, default: @/dev/ttyUSB0@) &mdash; Name of device to test

h3. <a name="hdd-array"></a>HDD array stress (hdd-array)

<div class="infobox"><img src="{relocatable:/images/hdd-destructive.png}" width="64" height="64" title="Test destroys contents of HDD" alt="Test destroys contents of HDD" /></div>

HDD array stress test

* *Components tested:* CPU, HDD, Memory, Mainboard, Disk Controller
* *Variables:*
** *JOBS* (int, default: @16@) &mdash; Number of parallely running jobs during compile
** *LOGTIME* (int, default: @120@) &mdash; Time between progress updates, sec
** *STRESS_TREE* (string, default: @linux-2.6.22.5-31-stress.tar.gz@) &mdash; Tarball file containing stress test tree
** *TESTTIME* (int, default: @3600@) &mdash; Total time of HDD array testing, sec

h3. <a name="hdd-passthrough"></a>HDD passthrough (hdd-passthrough)

<div class="infobox"><img src="{relocatable:/images/hdd-destructive.png}" width="64" height="64" title="Test destroys contents of HDD" alt="Test destroys contents of HDD" /></div>

HDD passthrough is a stress test that imposes heavy load on main system components. First, it tries to make all HDDs present in system to appear as separate device nodes - it checks all available RAID controllers, deletes all arrays / disk groups and creates passthrough devices to access individual HDDs if required. Second, it runs badblocks test on every available HDD, separating them in groups for simultaneous badblocks (8 HDDs doing badblocks simultaneously by default). Third, it makes a ramdisk filesystem and starts infinite compilation loop in memory, doing so with 16 simulatenous jobs (by default). Test ends successfully after both 1) minimal required stress time passes, 2) all HDDs get checked with badblocks. Test would fail if any bad blocks would be detected on any HDD. Test will usually hang or crash the system on unstable hardware.

* *Components tested:* CPU, HDD, Memory, Mainboard, Disk Controller
* *Variables:*
** *DISK_GROUP_SIZE* (int, default: @8@) &mdash; Number of disks per group for testing
** *JOBS* (int, default: @16@) &mdash; Number of parallely running jobs during stress test tree compile
** *MINIMAL_STRESS_TIME* (int, default: @600@) &mdash; Minimal time of stress testing
** *RAMDISK_SIZE* (int, default: @400@) &mdash; Size of memory disk for stress tree building, MB
** *STRESS_TREE* (string, default: @linux-2.6.22.5-31-stress.tar.gz@) &mdash; Tarball file containing stress test tree

h3. <a name="hdd-smart"></a>HDD SMART (hdd-smart)


This test starts internal SMART tests for every HDD available. These tests usually put heavy load on drive with lots of internal block reading/writing operations, though it's all done transparently by HDD's firmware in background. This test does not destroy any data on HDDs.

* *Components tested:* HDD, Disk Controller

h3. <a name="hdparm"></a>HDD speed benchmark: hdparm (hdparm)


This benchmark runs on all hard drives in the system sequentally. Every hard drive is benchmarked for buffered speed and cached speed using basic hdparm test several times. The results for every HDD are averaged and submitted as benchmark results.

* *Components tested:* Disk Controller, HDD
* *Variables:*
** *AVG_SAMPLES* (int, default: @5@) &mdash; Number of tests per disc to average for result

h3. <a name="memory"></a>Memory test: memtester (memory)


This memory test is performed without reboot, under control of live full-featured OS, using user-space memtester program. Test takes special precautions and tries to lock maximum possible amount of memory for memtester. memtester tests memory using standard read-write-check method using 16 patterns.

* *Components tested:* Memory
* *Variables:*
** *LOGTIME* (int, default: @120@) &mdash; Time between progress updates, sec
** *TEST_LOOPS* (int, default: @3@) &mdash; Number of testing loops

h3. <a name="mencoder"></a>Mencoder (mencoder)


Mencoder encoding time benchmark

* *Components tested:* CPU, Memory, Mainboard
* *Variables:*
** *ENCODE_OPTIONS* (string, default: @-ovc lavc -lavcopts vcodec=mpeg4 -oac mp3lame -lameopts vbr=3@) &mdash; Encoding options
** *FILE_TO_ENCODE* (string, default: @/usr/share/inquisitor/movie.avi@) &mdash; Path to file need to be encoded

h3. <a name="net"></a>Network interface (net)


Network interfaces testing

* *Components tested:* NIC
* *Variables:*
** *EXCLUDE_MAC* (string, default: _empty_) &mdash; Exclude NICs with MAC addresses that match this regexp from testing
** *MD5* (string, default: @805414334eb1d3ff4fdca507ec82098f@) &mdash; MD5 checksum for checking
** *TIMEOUT* (int, default: @15@) &mdash; Wait timeout while test file retrieving, sec
** *URL* (string, default: @3000/test_file@) &mdash; Relative to server PORT:URL to be fetched and checked

h3. <a name="odd_read"></a>ODD read (odd_read)


Optical Disc Drive read test

* *Components tested:* OSD
* *Variables:*
** *FORCE_NON_INTERACTIVE* (boolean, default: @false@) &mdash; Force non-interactive mode for already prepared system
** *MESH_POINTS* (int, default: @1024@) &mdash; Points for meshes for monitoring drive's speed
** *TEST_IMAGE_BLOCKS* (int, default: @332800@) &mdash; This images size in blocks (2048 bytes each)
** *TEST_IMAGE_HASH* (string, default: @6fa7786eef2e11d36e8bc1663679f161@) &mdash; Default image for comparison hash

h3. <a name="odd_write"></a>odd_write (odd_write)


Optical Disc Drive write test

* *Components tested:* ODD
* *Variables:*
** *FORCE_NON_INTERACTIVE* (boolean, default: @false@) &mdash; Force non-interactive mode for already prepared system
** *TEST_IMAGE* (string, default: @iso/testimage.iso@) &mdash; ISO image path (absolute or relative)
** *TEST_IMAGE_BLOCKS* (int, default: @332800@) &mdash; This images size in blocks (2048 bytes each)
** *TEST_IMAGE_MD5* (string, default: @ffffffffffffffffffffffffffffffff@) &mdash; Test image MD5 hash
** *WRITE_MESSAGE* (string, default: @Writing test disc@) &mdash; Message to print when test will start
** *WRITE_SPEED* (int, default: @10@) &mdash; Default write speed if it won't detect
** *WRITE_SPEED_FORCE* (boolean, default: @true@) &mdash; Force write speed using

h3. <a name="stream"></a>Stream (stream)


STREAM memory throughput benchmark

* *Components tested:* Memory

h3. <a name="unixbench"></a>Unixbench (unixbench)


UNIX Bench Multi-CPU benchmark

* *Components tested:* CPU, Memory, Mainboard

h3. <a name="usb-device"></a>USB presence (usb-device)


Tests presence of designated USB device

* *Components tested:* USB
* *Variables:*
** *COUNT* (int, default: @1@) &mdash; There should be this many devices
** *IDPRODUCT* (string, default: @6001@) &mdash; Filter in only devices with this idProduct (match all if empty)
** *IDVENDOR* (string, default: @0403@) &mdash; Filter in only devices with this idVendor (match all if empty)

h3. <a name="usb-flash-drive"></a>USB Flash Drive (usb-flash-drive)

<div class="infobox"><img src="{relocatable:/images/hdd-destructive.png}" width="64" height="64" title="Test destroys contents of HDD" alt="Test destroys contents of HDD" /></div>

USB Flash Drive working ability test with speed measurement

* *Components tested:* USB
* *Variables:*
** *BLOCKSIZE* (int, default: @1024@) &mdash; Blocksize used for reading and writing by dd, KiB
** *COUNT* (int, default: @2@) &mdash; There should be this many devices
** *SIZE* (int, default: @20@) &mdash; Size of test file to be written, Blocksizes

h3. <a name="whetstone"></a>Whetstone (whetstone)


Whetstone floating-point calculations benchmark

* *Components tested:* CPU
* *Variables:*
** *LOOPS* (int, default: @20000@) &mdash; Loop count

