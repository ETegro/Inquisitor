#!/bin/sh -e
# client/test/usb-flash-drive - A part of Inquisitor project
# Copyright (C) 2004-2008 by Iquisitor team 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# NAME=USB Flash Drive
# DESCRIPTION=USB Flash Drive working ability test with speed measurement
# DESTROYS_HDD=true
# IS_INTERACTIVE=true
# POWEROFF_DURING_TEST=false
# VERSION=0.1
# TAGS=benchmark,usb,usb-storage
# DEPENDS=USB
# VAR=SIZE:int:20:Size of test file to be written, Blocksizes
# VAR=BLOCKSIZE:int:1024:Blocksize used for reading and writing by dd, KiB
# VAR=COUNT:int:2:There should be this many devices

. /usr/share/inquisitor/functions-test

exit_handler()
{
	[ -f $FIFOFILE ] && rm $FIFOFILE
	[ -f $FIFOFILE.md5 ] && rm $FIFOFILE.md5
	[ -f $FIFOFILE.read_speed ] && rm $FIFOFILE.read_speed
}

FIFOFILE=`mktemp`

# Check for ready for testing drives
STORAGE_QUANTITY=0
for UDI in `hal-find-by-property --key storage.bus --string usb`; do
	hal-get-property --udi "$UDI" --key storage.drive_type |
		grep -q "^disk$" || continue
	STORAGE_QUANTITY=$(( $STORAGE_QUANTITY + 1 ))
done
if [ "$STORAGE_QUANTITY" -ne "$COUNT" ]; then
	STORAGE_QUANTITY=0
	# Wait user for inserting needed flash drives
	require_attention
	print_green_message "Insert $COUNT USB Flash drives and press enter"
	read foobar #dummy variable
	dismiss_attention

	for UDI in `hal-find-by-property --key storage.bus --string usb`; do
		hal-get-property --udi "$UDI" --key storage.drive_type |
			grep -q "^disk$" || continue

		vendor=`hal-get-property --udi "$UDI" --key storage.vendor`
		product=`hal-get-property --udi "$UDI" --key info.product`
		STORAGE_QUANTITY=$(( $STORAGE_QUANTITY + 1 ))
		print_green_message "Vendor: $vendor Product: $product"
	done
	print_green_message "Total USB drives quantity: $STORAGE_QUANTITY"
fi

# Check if there are right number of devices
if [ "$STORAGE_QUANTITY" -lt "$COUNT" ]; then
	print_red_message "Found $STORAGE_QUANTITY drives insted of $COUNT"
	test_failed "$STORAGE_QUANTITY drives insted of $COUNT"
else
for UDI in `hal-find-by-property --key storage.bus --string usb`; do
	hal-get-property --udi "$UDI" --key storage.drive_type |
		grep -q "^disk$" || continue
	block_dev=`hal-get-property --udi "$UDI" --key block.device`
	echo -n "Drive $block_dev..."

	# Detecting drive size and random seed
	drive_size=`hal-get-property --udi "$UDI" --key storage.removable.media_size`
	seed=$(( $RANDOM % ($drive_size / 1048576 / $SIZE - 1) ))
	
	echo -n "writing..."
	rm $FIFOFILE
	mkfifo $FIFOFILE
	md5sum -b $FIFOFILE | awk '{print $1}' > ${FIFOFILE}.md5 &
	write_speed_result=`dd if=/dev/urandom bs=${BLOCKSIZE}k count=${SIZE} \
		2>/dev/null | tee $FIFOFILE |
		dd of=${block_dev} bs=${BLOCKSIZE}k oflag=sync seek=$(($SIZE * $seed)) 2>&1 |
		sed -n '$ p'` ||
		test_failed "Drive $block_dev writing error"

	echo -n "reading..."
	read_md5=`dd if=${block_dev} bs=${BLOCKSIZE}k count=${SIZE} skip=$(($SIZE * $seed)) \
		2>${FIFOFILE}.read_speed | md5sum -b | awk '{print $1}'` ||
		test_failed "Drive $block_dev reading error"

	echo -n "comparing..."
	[ `cat ${FIFOFILE}.md5` = "$read_md5" ] ||
		test_failed "Drive $block_dev comparing error"
	write_speed=`echo "$write_speed_result" | awk '{print $(NF-1)}'`
	write_speed_unit=`echo "$write_speed_result" | awk '{print $NF}'`
	read_speed=`sed -n '$ p' < ${FIFOFILE}.read_speed | 
		awk '{print $(NF-1)}'`
	read_speed_unit=`sed -n '$ p' < ${FIFOFILE}.read_speed |
		awk '{print $NF}'`
	benchmark_submit_float "Drive $block_dev writing speed, ${write_speed_unit}" $write_speed
	benchmark_submit_float "Drive $block_dev reading speed, ${read_speed_unit}" $read_speed
	echo_success
done
fi

test_succeeded
