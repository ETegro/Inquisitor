#!/bin/sh -e
# NAME=CPU burning
# DESCRIPTION=CPU burn-in testing
# DESTROYS_HDD=false
# IS_INTERACTIVE=false
# POWEROFF_DURING_TEST=false
# VERSION=0.1
# TAGS=cpu,stress
# VAR=TEST_TIME:int:1800:Total time of CPU testing, sec

. /usr/share/inquisitor/functions-test

# Cleanup
exit_handler()
{
	local rc=$?
	trap - EXIT

	if [ -f "$TMP_DIR/*.pid" ]; then
		for I in "$TMP_DIR/*.pid"; do
			stop_background "$I"
		done
	fi
	if [ -d "$TMP_DIR" ]; then
		rm -fr "$TMP_DIR"
	fi
	exit $rc
}
trap exit_handler HUP PIPE INT QUIT TERM EXIT

TMP_DIR=`mktemp -d`

test_promise_time $TEST_TIME

# Detecting burn program
echo -n 'Detecting burners... '
if grep -q '^vendor_id.*:.*AuthenticAMD' /proc/cpuinfo; then
	BURN_PROGRAM=burnK7
else
	BURN_PROGRAM=burnP6
fi
echo -n $BURN_PROGRAM
echo_success

# Detect CPU cores quantity
CPU_QUANTITY=`grep '^processor' /proc/cpuinfo | wc -l`

# Start
for i in `seq 0 $(($CPU_QUANTITY - 1))`; do
	echo -n "Starting burn on core $i"
	start_background "$TMP_DIR/cpuburn$i.pid" "$i" "$BURN_PROGRAM"
	echo_success
done

echo -n "Burning for $TEST_TIME..."
sleep $TEST_TIME
echo_success

# Stop everything; fail if something is already dead
for i in `seq 0 $(($CPU_QUANTITY - 1))`; do
	echo -n "Stopping burn on core $i"
	if stop_background "$TMP_DIR/cpuburn$i.pid"; then
		echo_success
	else
		echo_failed
		test_failed "Burner $i died prematurely"
	fi
done
