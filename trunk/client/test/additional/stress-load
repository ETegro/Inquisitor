#!/bin/sh -e
# NAME=Stress_build
# DESCRIPTION=Stress test kernel building
# DESTROYS_HDD=N
# IS_INTERACTIVE=N
# POWEROFF_DURING_TEST=N
# VAR=STRESS_BUILD_DEVICE:str:Device which will be used for kernel building in it
# VAR=STRESS_BUILD_TIMEOUT:int:No description
# VAR=STRESS_BUILD_TARGET:str:No description
# VAR=STRESS_BUILD_LOGTIME:int:No description

. /usr/share/inquisitor/functions

STRESS_LOAD_ROOT=/tmp/stresstest
STRESS_LOAD_TREE=/usr/share/inquisitor/linux-2.6.15-stress


before_load()
{
	LOAD_ROOT=$1
	LOAD_TREE=$2
	[ ! -d "$LOAD_ROOT" ] || return 1
	rm -rf "$LOAD_ROOT/$LOAD_TREE" 2>/dev/null 1>/dev/null || true
	cd "$LOAD_ROOT"
	TREE_NAME=`basename "$LOAD_TREE"`
	tar xzf "${LOAD_TREE}.tar.gz" || return 2
	cd "$TREE_NAME"
	if echo "$TREE_NAME" | grep '^linux' ; then
		find | xargs touch
		touch .config 
		touch include/linux/autoconf.h
	fi
}

prepare_ramdrive()
{
	LOAD_ROOT=$1
	RAMDRIVE=$2
	#check if we need to load the ramdrive moduel
	lsmod | grep -w rd 2>/dev/null >/dev/null || modprobe rd || return 1
	#determine default ramdrive if none was specified in params
	[ -z "$RAMDRIVE" ] && RAMDRIVE=/dev/`ls /sys/block/ | grep 'ram[0-9]' | sort | head -n 1`
	prepare_partition "$LOAD_ROOT" "$RAMDRIVE"

}

remove_ramdrive()
{
	RAMDRIVE=$1
        [ -z "$RAMDRIVE" ] && RAMDRIVE=/dev/`ls /sys/block/ | grep 'ram[0-9]' | sort | head -n 1`
	remove_partition "$RAMDRIVE"
}


remove_partition()
{
	DRIVE=$1
	umount "$DRIVE" 2>/dev/null
}

prepare_partition()
{
	LOAD_ROOT=$1
	DEVICE=$2
	mke2fs -m0 -F "$DEVICE" || return 1
	[ ! -d "${LOAD_ROOT}/${DEVICE}" ] || return 2
	[ ! -e "${LOAD_ROOT}/${DEVICE}" ] && mkdir -p "${LOAD_ROOT}/${DEVICE}" || return 3
	mount "$DEVICE" "${LOAD_ROOT}/${DEVICE}" 2>/dev/null
}

after_load()
{
	return 0
}

do_load()
{
	LOOPS=
	TIMEOUT=
	STRESS_BUILD_LOGTIME=
	CHOOSE=timeout
	while [ -n "$1" ] ; do
		case "$1" in
			--loops=*)
				LOOPS=${1#--loops=}
				TIMEOUT=
				;;
			--timeout=*)
				TIMEOUT=${1#--timeout=}
				LOOPS=
				;;
			--logevery=*)
				STRESS_BUILD_LOGTIME=${1#--logtime=}
				;;
			-t)
				LOOPS=
				CHOOSE=timeout
				;;
			-l)
				TIMEOUT=
				CHOOSE=loops
				;;
			*)	
				if [ -n "$TIMEOUT" -o -n "$LOOPS" ] ; then
					STRESS_BUILD_LOGTIME=$1
				else
					TIMEOUT[ "$CHOOSE" == timeout ] && TIMEOUT=$1 || LOOPS=$1
				fi

		esac
		shift
	done
	[ -z "$TIMEOUT" -a -z "$TIMEOUT" ] && return 1
	if [ -z "$STRESS_BUILD_LOGTIME" ] ; then 
		[ -n "$TIMEOUT" ] && STRESS_BUILD_LOGTIME=$(( 30 * 60 )) || STRESS_BUILD_LOGTIME=$(( 10 ))
	fi
	LASTTIME=0
	START=`date "+%s"`
	PASS=1
	for (( ;; )); do 
		TIME=`date "+%s"`
		if [ -n "$TIMEOUT" ] ; then
			if (( TIME - START > TIMEOUT )); then 
				return 0
			fi
			(( CURTIME = (TIME - START) / STRESS_BUILD_LOGTIME ))
			if (( CURTIME > LASTTIME )); then 
				(( LASTTIME = CURTIME ))
			fi
		else
			if (( PASS > LOOPS )) ; then 
				return 0
			fi
			#TODO
		fi


		make clean >/dev/null 2>/dev/null && make -j $jobs fs >/dev/null 2>/dev/null || return 1

		PASS=$[$PASS+1]
	done
}


