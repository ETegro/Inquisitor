#!/bin/sh
#
# Functions defined in this file are used by many rc scripts.
# 
# Author:	Miquel van Smoorenburg, <miquels@drinkel.nl.mugnet.org>
# Hacked by:	Greg Galloway and Marc Ewing
# Changed by:	Dmitry V. Levin

# Set the initial default search path for use by startup scripts.
export PATH="/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin:/usr/X11R6/bin"

ALERT_ATTENTION='65535 65535 0'
ALERT_FAILURE='65535 0 0'
ALERT_PASSED='0 65535 0'

. $SHARE_DIR/outformat

echo_success()
{
	MOVE_TO_COL
	echo -n '[ '
	SETCOLOR_SUCCESS
	echo -n 'DONE'
	SETCOLOR_NORMAL
	echo -ne ' ]\r'
	echo
}

echo_failure()
{
	MOVE_TO_COL
	echo -n '['
	SETCOLOR_FAILURE
	echo -n 'FAILED'
	SETCOLOR_NORMAL
	echo -ne ']\r'
	echo
}

echo_skipped()
{
	MOVE_TO_COL
	echo -n '['
	SETCOLOR_WARNING
	echo -n ' SKIP '
	SETCOLOR_NORMAL
	echo -ne ']\r'
	echo
}

echo_passed()
{
	MOVE_TO_COL
	echo -n '['
	SETCOLOR_WARNING
	echo -n 'PASSED'
	SETCOLOR_NORMAL
	echo -ne ']\r'
	echo
}

echo_running()
{
	MOVE_TO_COL
	echo -n '['
	SETCOLOR_WARNING
	echo -n 'CALLED'
	SETCOLOR_NORMAL
	echo -ne ']\r'
	echo
}

# Log that something succeeded
success()
{
	echo -n $1
	echo_success
}

# Log that something failed
failure()
{
	echo -n $1
	echo_failure
}

# Log that something is skipped, because no support for it found
skipped()
{
	echo -n $1
	echo_skipped
}

test_ok_file()
{
	test_ok $TESTNAME $TEST_ID
}

test_failed_file()
{
	test_failed $TESTNAME $TEST_ID "$1"
}

test_skipped_file()
{
	test_skipped $TESTNAME $TEST_ID
}

test_progress()
{
	COMPLETE=$1
	TOTAL=$2

	echo -en "\r"
	echo -n "Test $TEST_NAME "

	echo -en $COMPLETE/$TOTAL"\t"

	#Show percents
	if [ "$TOTAL" -gt 40 ] ; then
		echo -n "("$(( 100 * $COMPLETE / $TOTAL ))%")"
	else
		echo -n "["
		for i in `seq 1 $COMPLETE` ; do echo -n "#" ; done
		for i in `seq $(($COMPLETE + 1)) $TOTAL` ; do echo -n "." ; done
		echo -n "]"
	fi

	test_stage_progress $COMPLETE $TOTAL
}

test_started()
{
	TOTAL=$1

	echo ""
	echo -n Test $TEST_NAME
	echo_running
	test_stage_advance $TEST_NAME start
	test_progress 0 $TOTAL
}

test_succeeded()
{
	RESULT=$1
	if echo $TEST_NAME | grep -q "^bench_"; then
		RESULT=`echo $1 | sed 's/\&$//'`
	fi

	echo
	echo -n Test $TEST_NAME
	echo_success
	test_stage_advance $TEST_NAME finish $RESULT
}

test_failed()
{
	COMMENT=$1

	echo
	echo -n Test $TEST_NAME
	echo_failure
	test_stage_advance $TEST_NAME fail $COMMENT
}

refresh_console()
{
	chvt 4
	sleep 1
	chvt 1
	test_set_status	
}

watchdog_start()
{
	echo -n 'Starting watchdog'
	watchdog &
	echo $! >~/watchdog.pid
	echo_success
}

watchdog_stop()
{
	echo -n 'Stopping watchdog'
	if [ -r ~/watchdog.pid ]; then
		kill `cat ~/watchdog.pid` ||
		rm -f ~/watchdog.pid
		echo_success
	else
		echo_skipped
	fi
}

killbypid()
{
	if [ -f ~/$1.pid ]; then
		kill `cat ~/$1.pid` >/dev/null 2>/dev/null
		rm -f ~/$1.pid
	fi
}

print_green_message()
{
	echo ""
	SETCOLOR_SUCCESS
	echo "$1"
	SETCOLOR_NORMAL
	echo ""
}

print_red_message()
{
	echo ""
	SETCOLOR_FAILURE
	echo "$1"
	SETCOLOR_NORMAL
	echo ""
}

IP_SUITE='/sbin/ip'

dev_for_route_to_server()
{
	dev=`$IP_SUITE -o -4 route get $SERVER | grep -o 'dev [^ ]*'`
	echo ${dev#'dev '}
}

subnet_for_dev()
{
	local dev=$1
	local ip=
	local mask=
	local addr='\([0-9]\+\)'
	addr=$addr'\.'$addr'\.'$addr'\.'$addr
	local pattern='ip=$(( ((\1 << 24) | (\2 << 16) | (\3 << 8) | (\4)) \& (((1 << (32 - \5)) - 1) ^ 0xffffffff) ));'
	pattern=$pattern'mask=\5;'
	pattern='s/^.*inet '$addr'\/\([0-9]\+\).*$/'$pattern'/'
	eval `$IP_SUITE -o -4 address show $dev | sed "$pattern" `
	echo "$(( ip >> 24 )).$(( (ip >> 16) & 255 )).$(( (ip >> 8) & 255 )).$(( ip & 255 ))/$mask"
}
