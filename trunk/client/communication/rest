#!/bin/sh

REST_SERVER=http://$SERVER:3000

get_id_by_macs()
{
	MACS=$1
	if Z=`curl -sf "$REST_SERVER/computers/identify?macs=$MACS"`; then
		echo "$Z" | grep '<id' | sed 's/^.*id [^>]*>\s*\([0-9]\+\)\s*<\/\s*id.*$/\1/' 
	fi
}

test_stage_advance()
{
	STAGE=$1
	EVENT=$2
	COMMENT=$3
	curl -sf "$REST_SERVER/computers/advance/$COMPUTER_ID.xml?stage=$STAGE&event=$EVENT&comment=$COMMENT" >/dev/null
}

test_stage_progress()
{
	COMPLETE=$1
	TOTAL=$2
	curl -sf "$REST_SERVER/computers/progress/$COMPUTER_ID.xml?complete=$COMPLETE&total=$TOTAL" >/dev/null
}

test_promise_time()
{
	curl -sf "$REST_SERVER/computers/test_promise_time/$COMPUTER_ID.xml?sec=$1"
}

submit_components()
{
	FILENAME=$1
	curl -f --data list=\""`cat $FILENAME `"\" -X POST "$REST_SERVER/computers/submit_components/$COMPUTER_ID.xml"
}

submit_additional_components()
{
	FILENAME=$1
	curl -f --data list=\""`cat $FILENAME `"\" -X POST "$REST_SERVER/computers/submit_additional_components/$COMPUTER_ID.xml"
}

# Mark current testing as finished
testing_finished()
{
	curl -sf "$REST_SERVER/computers/testing_finished/$COMPUTER_ID"
}

set_ip()
{
	curl -sf "$REST_SERVER/computers/set_ip/$COMPUTER_ID?ip=$1"
}

watchdog()
{
	while true; do
		curl -f "$REST_SERVER/computers/watchdog/$COMPUTER_ID" || echo 'Watchdog ping failed!'
		sleep $[45 + $RANDOM % 15]
	done
}

publish_my_ip()
{
	local IP=`detect_dev`
	IP=`subnet $IP`
	IP=set_ip $IP
}

